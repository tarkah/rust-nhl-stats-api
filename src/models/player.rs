/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Player {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f32>,
    #[serde(rename = "fullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "firstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "lastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "primaryNumber", skip_serializing_if = "Option::is_none")]
    pub primary_number: Option<String>,
    #[serde(rename = "birthDate", skip_serializing_if = "Option::is_none")]
    pub birth_date: Option<String>,
    #[serde(rename = "currentAge", skip_serializing_if = "Option::is_none")]
    pub current_age: Option<f32>,
    #[serde(rename = "birthCity", skip_serializing_if = "Option::is_none")]
    pub birth_city: Option<String>,
    #[serde(rename = "birthStateProvince", skip_serializing_if = "Option::is_none")]
    pub birth_state_province: Option<String>,
    #[serde(rename = "birthCountry", skip_serializing_if = "Option::is_none")]
    pub birth_country: Option<String>,
    #[serde(rename = "nationality", skip_serializing_if = "Option::is_none")]
    pub nationality: Option<String>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<String>,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "alternateCaptain", skip_serializing_if = "Option::is_none")]
    pub alternate_captain: Option<bool>,
    #[serde(rename = "captain", skip_serializing_if = "Option::is_none")]
    pub captain: Option<bool>,
    #[serde(rename = "rookie", skip_serializing_if = "Option::is_none")]
    pub rookie: Option<bool>,
    #[serde(rename = "shootsCatches", skip_serializing_if = "Option::is_none")]
    pub shoots_catches: Option<ShootsCatches>,
    #[serde(rename = "rosterStatus", skip_serializing_if = "Option::is_none")]
    pub roster_status: Option<String>,
    #[serde(rename = "currentTeam", skip_serializing_if = "Option::is_none")]
    pub current_team: Option<crate::models::PlayerCurrentTeam>,
    #[serde(rename = "primaryPosition", skip_serializing_if = "Option::is_none")]
    pub primary_position: Option<crate::models::DraftProspectPrimaryPosition>,
}

impl Player {
    pub fn new() -> Player {
        Player {
            id: None,
            full_name: None,
            link: None,
            first_name: None,
            last_name: None,
            primary_number: None,
            birth_date: None,
            current_age: None,
            birth_city: None,
            birth_state_province: None,
            birth_country: None,
            nationality: None,
            height: None,
            weight: None,
            active: None,
            alternate_captain: None,
            captain: None,
            rookie: None,
            shoots_catches: None,
            roster_status: None,
            current_team: None,
            primary_position: None,
        }
    }
}

/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum ShootsCatches {
    #[serde(rename = "L")]
    L,
    #[serde(rename = "R")]
    R,
}

