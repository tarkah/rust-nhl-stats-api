/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameLiveDataPlays {
    #[serde(rename = "allPlays", skip_serializing_if = "Option::is_none")]
    pub all_plays: Option<Vec<crate::models::GamePlay>>,
    #[serde(rename = "scoringPlays", skip_serializing_if = "Option::is_none")]
    pub scoring_plays: Option<Vec<f32>>,
    #[serde(rename = "penaltyPlays", skip_serializing_if = "Option::is_none")]
    pub penalty_plays: Option<Vec<f32>>,
    #[serde(rename = "playsByPeriod", skip_serializing_if = "Option::is_none")]
    pub plays_by_period: Option<Vec<crate::models::GameLiveDataPlaysPlaysByPeriod>>,
    #[serde(rename = "currentPlay", skip_serializing_if = "Option::is_none")]
    pub current_play: Option<crate::models::GamePlay>,
}

impl GameLiveDataPlays {
    pub fn new() -> GameLiveDataPlays {
        GameLiveDataPlays {
            all_plays: None,
            scoring_plays: None,
            penalty_plays: None,
            plays_by_period: None,
            current_play: None,
        }
    }
}


