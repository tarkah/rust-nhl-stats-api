/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameEditorial {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "headline", skip_serializing_if = "Option::is_none")]
    pub headline: Option<String>,
    #[serde(rename = "subhead", skip_serializing_if = "Option::is_none")]
    pub subhead: Option<String>,
    #[serde(rename = "seoTitle", skip_serializing_if = "Option::is_none")]
    pub seo_title: Option<String>,
    #[serde(rename = "seoDescription", skip_serializing_if = "Option::is_none")]
    pub seo_description: Option<String>,
    #[serde(rename = "seoKeywords", skip_serializing_if = "Option::is_none")]
    pub seo_keywords: Option<String>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[serde(rename = "commenting", skip_serializing_if = "Option::is_none")]
    pub commenting: Option<bool>,
    #[serde(rename = "tagline", skip_serializing_if = "Option::is_none")]
    pub tagline: Option<String>,
    #[serde(rename = "tokenData", skip_serializing_if = "Option::is_none")]
    pub token_data: Option<crate::models::GameEditorialTokenData>,
    #[serde(rename = "contributor", skip_serializing_if = "Option::is_none")]
    pub contributor: Option<crate::models::GameEditorialContributor>,
    #[serde(rename = "keywordsDisplay", skip_serializing_if = "Option::is_none")]
    pub keywords_display: Option<Vec<crate::models::GameEditorialKeyword>>,
    #[serde(rename = "keywordsAll", skip_serializing_if = "Option::is_none")]
    pub keywords_all: Option<Vec<crate::models::GameEditorialKeyword>>,
    #[serde(rename = "approval", skip_serializing_if = "Option::is_none")]
    pub approval: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "dataURI", skip_serializing_if = "Option::is_none")]
    pub data_uri: Option<String>,
    #[serde(rename = "primaryKeyword", skip_serializing_if = "Option::is_none")]
    pub primary_keyword: Option<crate::models::GameEditorialKeyword>,
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<crate::models::GameEditorialMedia>,
    #[serde(rename = "preview", skip_serializing_if = "Option::is_none")]
    pub preview: Option<String>,
}

impl GameEditorial {
    pub fn new() -> GameEditorial {
        GameEditorial {
            _type: None,
            state: None,
            date: None,
            id: None,
            headline: None,
            subhead: None,
            seo_title: None,
            seo_description: None,
            seo_keywords: None,
            slug: None,
            commenting: None,
            tagline: None,
            token_data: None,
            contributor: None,
            keywords_display: None,
            keywords_all: None,
            approval: None,
            url: None,
            data_uri: None,
            primary_keyword: None,
            media: None,
            preview: None,
        }
    }
}


