/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Conference {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<f32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<Name>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "abbreviation", skip_serializing_if = "Option::is_none")]
    pub abbreviation: Option<Abbreviation>,
    #[serde(rename = "shortName", skip_serializing_if = "Option::is_none")]
    pub short_name: Option<ShortName>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
}

impl Conference {
    pub fn new() -> Conference {
        Conference {
            id: None,
            name: None,
            link: None,
            abbreviation: None,
            short_name: None,
            active: None,
        }
    }
}

/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Name {
    #[serde(rename = "Eastern")]
    Eastern,
    #[serde(rename = "Western")]
    Western,
    #[serde(rename = "World Cup of Hockey")]
    World_Cup_of_Hockey,
}
/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Abbreviation {
    #[serde(rename = "E")]
    E,
    #[serde(rename = "W")]
    W,
    #[serde(rename = "WCH")]
    WCH,
}
/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum ShortName {
    #[serde(rename = "East")]
    East,
    #[serde(rename = "West")]
    West,
    #[serde(rename = "WCup")]
    WCup,
}

