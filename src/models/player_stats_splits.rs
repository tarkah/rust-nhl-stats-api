/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerStatsSplits {
    #[serde(rename = "season", skip_serializing_if = "Option::is_none")]
    pub season: Option<String>,
    #[serde(rename = "stat", skip_serializing_if = "Option::is_none")]
    pub stat: Option<crate::models::PlayerStatsStat>,
    #[serde(rename = "isHome", skip_serializing_if = "Option::is_none")]
    pub is_home: Option<bool>,
    #[serde(rename = "isWin", skip_serializing_if = "Option::is_none")]
    pub is_win: Option<bool>,
    #[serde(rename = "isOT", skip_serializing_if = "Option::is_none")]
    pub is_ot: Option<bool>,
    #[serde(rename = "month", skip_serializing_if = "Option::is_none")]
    pub month: Option<f32>,
    #[serde(rename = "dayOfWeek", skip_serializing_if = "Option::is_none")]
    pub day_of_week: Option<f32>,
    #[serde(rename = "opponent", skip_serializing_if = "Option::is_none")]
    pub opponent: Option<crate::models::DraftTeam>,
    #[serde(rename = "opponentDivision", skip_serializing_if = "Option::is_none")]
    pub opponent_division: Option<crate::models::PlayerStatsOpponentDivision>,
    #[serde(rename = "opponentConference", skip_serializing_if = "Option::is_none")]
    pub opponent_conference: Option<crate::models::DivisionConference>,
}

impl PlayerStatsSplits {
    pub fn new() -> PlayerStatsSplits {
        PlayerStatsSplits {
            season: None,
            stat: None,
            is_home: None,
            is_win: None,
            is_ot: None,
            month: None,
            day_of_week: None,
            opponent: None,
            opponent_division: None,
            opponent_conference: None,
        }
    }
}


