/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GamePlayAbout {
    #[serde(rename = "eventIdx", skip_serializing_if = "Option::is_none")]
    pub event_idx: Option<f32>,
    #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<f32>,
    #[serde(rename = "period", skip_serializing_if = "Option::is_none")]
    pub period: Option<f32>,
    #[serde(rename = "periodType", skip_serializing_if = "Option::is_none")]
    pub period_type: Option<String>,
    #[serde(rename = "ordinalNum", skip_serializing_if = "Option::is_none")]
    pub ordinal_num: Option<String>,
    #[serde(rename = "periodTime", skip_serializing_if = "Option::is_none")]
    pub period_time: Option<String>,
    #[serde(rename = "periodTimeRemaining", skip_serializing_if = "Option::is_none")]
    pub period_time_remaining: Option<String>,
    #[serde(rename = "dateTime", skip_serializing_if = "Option::is_none")]
    pub date_time: Option<String>,
    #[serde(rename = "goals", skip_serializing_if = "Option::is_none")]
    pub goals: Option<crate::models::GamePlayAboutGoals>,
}

impl GamePlayAbout {
    pub fn new() -> GamePlayAbout {
        GamePlayAbout {
            event_idx: None,
            event_id: None,
            period: None,
            period_type: None,
            ordinal_num: None,
            period_time: None,
            period_time_remaining: None,
            date_time: None,
            goals: None,
        }
    }
}


