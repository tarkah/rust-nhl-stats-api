/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerStatsStat {
    #[serde(rename = "timeOnIce", skip_serializing_if = "Option::is_none")]
    pub time_on_ice: Option<String>,
    #[serde(rename = "assists", skip_serializing_if = "Option::is_none")]
    pub assists: Option<String>,
    #[serde(rename = "goals", skip_serializing_if = "Option::is_none")]
    pub goals: Option<f32>,
    #[serde(rename = "pim", skip_serializing_if = "Option::is_none")]
    pub pim: Option<f32>,
    #[serde(rename = "shots", skip_serializing_if = "Option::is_none")]
    pub shots: Option<f32>,
    #[serde(rename = "games", skip_serializing_if = "Option::is_none")]
    pub games: Option<f32>,
    #[serde(rename = "hits", skip_serializing_if = "Option::is_none")]
    pub hits: Option<f32>,
    #[serde(rename = "powerPlayGoals", skip_serializing_if = "Option::is_none")]
    pub power_play_goals: Option<f32>,
    #[serde(rename = "powerPlayPoints", skip_serializing_if = "Option::is_none")]
    pub power_play_points: Option<f32>,
    #[serde(rename = "powerPlayTimeOnIce", skip_serializing_if = "Option::is_none")]
    pub power_play_time_on_ice: Option<f32>,
    #[serde(rename = "evenTimeOnIce", skip_serializing_if = "Option::is_none")]
    pub even_time_on_ice: Option<f32>,
    #[serde(rename = "penaltyMinutes", skip_serializing_if = "Option::is_none")]
    pub penalty_minutes: Option<f32>,
    #[serde(rename = "faceOffPct", skip_serializing_if = "Option::is_none")]
    pub face_off_pct: Option<f64>,
    #[serde(rename = "shotPct", skip_serializing_if = "Option::is_none")]
    pub shot_pct: Option<f32>,
    #[serde(rename = "gameWinningGoals", skip_serializing_if = "Option::is_none")]
    pub game_winning_goals: Option<f32>,
    #[serde(rename = "overTimeGoals", skip_serializing_if = "Option::is_none")]
    pub over_time_goals: Option<f32>,
    #[serde(rename = "shortHandedGoals", skip_serializing_if = "Option::is_none")]
    pub short_handed_goals: Option<f32>,
    #[serde(rename = "shortHandedPoints", skip_serializing_if = "Option::is_none")]
    pub short_handed_points: Option<f32>,
    #[serde(rename = "shortHandedTimeOnIce", skip_serializing_if = "Option::is_none")]
    pub short_handed_time_on_ice: Option<String>,
    #[serde(rename = "blocked", skip_serializing_if = "Option::is_none")]
    pub blocked: Option<f32>,
    #[serde(rename = "plusMinus", skip_serializing_if = "Option::is_none")]
    pub plus_minus: Option<f32>,
    #[serde(rename = "points", skip_serializing_if = "Option::is_none")]
    pub points: Option<f32>,
    #[serde(rename = "shifts", skip_serializing_if = "Option::is_none")]
    pub shifts: Option<f32>,
    #[serde(rename = "timeOnIcePerGame", skip_serializing_if = "Option::is_none")]
    pub time_on_ice_per_game: Option<String>,
    #[serde(rename = "evenTimeOnIcePerGame", skip_serializing_if = "Option::is_none")]
    pub even_time_on_ice_per_game: Option<String>,
    #[serde(rename = "shortHandedTimeOnIcePerGame", skip_serializing_if = "Option::is_none")]
    pub short_handed_time_on_ice_per_game: Option<String>,
    #[serde(rename = "powerPlayTimeOnIcePerGame", skip_serializing_if = "Option::is_none")]
    pub power_play_time_on_ice_per_game: Option<String>,
    #[serde(rename = "rankPowerPlayGoals", skip_serializing_if = "Option::is_none")]
    pub rank_power_play_goals: Option<String>,
    #[serde(rename = "rankBlockedShots", skip_serializing_if = "Option::is_none")]
    pub rank_blocked_shots: Option<String>,
    #[serde(rename = "rankAssists", skip_serializing_if = "Option::is_none")]
    pub rank_assists: Option<String>,
    #[serde(rename = "rankShotPct", skip_serializing_if = "Option::is_none")]
    pub rank_shot_pct: Option<String>,
    #[serde(rename = "rankGoals", skip_serializing_if = "Option::is_none")]
    pub rank_goals: Option<String>,
    #[serde(rename = "rankHits", skip_serializing_if = "Option::is_none")]
    pub rank_hits: Option<String>,
    #[serde(rename = "rankPenaltyMinutes", skip_serializing_if = "Option::is_none")]
    pub rank_penalty_minutes: Option<String>,
    #[serde(rename = "rankShortHandedGoals", skip_serializing_if = "Option::is_none")]
    pub rank_short_handed_goals: Option<String>,
    #[serde(rename = "rankPlusMinus", skip_serializing_if = "Option::is_none")]
    pub rank_plus_minus: Option<String>,
    #[serde(rename = "rankShots", skip_serializing_if = "Option::is_none")]
    pub rank_shots: Option<String>,
    #[serde(rename = "rankPoints", skip_serializing_if = "Option::is_none")]
    pub rank_points: Option<String>,
    #[serde(rename = "rankOvertimeGoals", skip_serializing_if = "Option::is_none")]
    pub rank_overtime_goals: Option<String>,
    #[serde(rename = "rankGamesPlayed", skip_serializing_if = "Option::is_none")]
    pub rank_games_played: Option<String>,
    #[serde(rename = "goalsInFirstPeriod", skip_serializing_if = "Option::is_none")]
    pub goals_in_first_period: Option<f32>,
    #[serde(rename = "goalsInSecondPeriod", skip_serializing_if = "Option::is_none")]
    pub goals_in_second_period: Option<f32>,
    #[serde(rename = "goalsInThirdPeriod", skip_serializing_if = "Option::is_none")]
    pub goals_in_third_period: Option<f32>,
    #[serde(rename = "goalsTrailingByOne", skip_serializing_if = "Option::is_none")]
    pub goals_trailing_by_one: Option<f32>,
    #[serde(rename = "goalsTrailingByTwo", skip_serializing_if = "Option::is_none")]
    pub goals_trailing_by_two: Option<f32>,
    #[serde(rename = "goalsTrailingByThreePlus", skip_serializing_if = "Option::is_none")]
    pub goals_trailing_by_three_plus: Option<f32>,
    #[serde(rename = "goalsWhenTied", skip_serializing_if = "Option::is_none")]
    pub goals_when_tied: Option<f32>,
    #[serde(rename = "goalsLeadingByOne", skip_serializing_if = "Option::is_none")]
    pub goals_leading_by_one: Option<f32>,
    #[serde(rename = "goalsLeadingByTwo", skip_serializing_if = "Option::is_none")]
    pub goals_leading_by_two: Option<f32>,
}

impl PlayerStatsStat {
    pub fn new() -> PlayerStatsStat {
        PlayerStatsStat {
            time_on_ice: None,
            assists: None,
            goals: None,
            pim: None,
            shots: None,
            games: None,
            hits: None,
            power_play_goals: None,
            power_play_points: None,
            power_play_time_on_ice: None,
            even_time_on_ice: None,
            penalty_minutes: None,
            face_off_pct: None,
            shot_pct: None,
            game_winning_goals: None,
            over_time_goals: None,
            short_handed_goals: None,
            short_handed_points: None,
            short_handed_time_on_ice: None,
            blocked: None,
            plus_minus: None,
            points: None,
            shifts: None,
            time_on_ice_per_game: None,
            even_time_on_ice_per_game: None,
            short_handed_time_on_ice_per_game: None,
            power_play_time_on_ice_per_game: None,
            rank_power_play_goals: None,
            rank_blocked_shots: None,
            rank_assists: None,
            rank_shot_pct: None,
            rank_goals: None,
            rank_hits: None,
            rank_penalty_minutes: None,
            rank_short_handed_goals: None,
            rank_plus_minus: None,
            rank_shots: None,
            rank_points: None,
            rank_overtime_goals: None,
            rank_games_played: None,
            goals_in_first_period: None,
            goals_in_second_period: None,
            goals_in_third_period: None,
            goals_trailing_by_one: None,
            goals_trailing_by_two: None,
            goals_trailing_by_three_plus: None,
            goals_when_tied: None,
            goals_leading_by_one: None,
            goals_leading_by_two: None,
        }
    }
}


