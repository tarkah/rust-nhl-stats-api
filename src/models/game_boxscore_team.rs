/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameBoxscoreTeam {
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<crate::models::GameBoxscoreTeamTeam>,
    #[serde(rename = "teamStats", skip_serializing_if = "Option::is_none")]
    pub team_stats: Option<crate::models::GameBoxscoreTeamTeamStats>,
    #[serde(rename = "players", skip_serializing_if = "Option::is_none")]
    pub players: Option<crate::models::GameBoxscoreTeamPlayers>,
    #[serde(rename = "goalies", skip_serializing_if = "Option::is_none")]
    pub goalies: Option<Vec<f32>>,
    #[serde(rename = "skaters", skip_serializing_if = "Option::is_none")]
    pub skaters: Option<Vec<f32>>,
    #[serde(rename = "onIce", skip_serializing_if = "Option::is_none")]
    pub on_ice: Option<Vec<f32>>,
    #[serde(rename = "onIcePlus", skip_serializing_if = "Option::is_none")]
    pub on_ice_plus: Option<Vec<crate::models::GameBoxscoreTeamOnIcePlus>>,
    #[serde(rename = "scratches", skip_serializing_if = "Option::is_none")]
    pub scratches: Option<Vec<f32>>,
    #[serde(rename = "penaltyBox", skip_serializing_if = "Option::is_none")]
    pub penalty_box: Option<Vec<f32>>,
    #[serde(rename = "coaches", skip_serializing_if = "Option::is_none")]
    pub coaches: Option<Vec<crate::models::GameBoxscoreTeamCoaches>>,
}

impl GameBoxscoreTeam {
    pub fn new() -> GameBoxscoreTeam {
        GameBoxscoreTeam {
            team: None,
            team_stats: None,
            players: None,
            goalies: None,
            skaters: None,
            on_ice: None,
            on_ice_plus: None,
            scratches: None,
            penalty_box: None,
            coaches: None,
        }
    }
}


