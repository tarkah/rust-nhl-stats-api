/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameHighlight {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "blurb", skip_serializing_if = "Option::is_none")]
    pub blurb: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    #[serde(rename = "authFlow", skip_serializing_if = "Option::is_none")]
    pub auth_flow: Option<bool>,
    #[serde(rename = "mediaPlaybackId", skip_serializing_if = "Option::is_none")]
    pub media_playback_id: Option<String>,
    #[serde(rename = "mediaState", skip_serializing_if = "Option::is_none")]
    pub media_state: Option<String>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<crate::models::GameEditorialKeyword>>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<crate::models::Photo>,
    #[serde(rename = "playbacks", skip_serializing_if = "Option::is_none")]
    pub playbacks: Option<Vec<crate::models::GameHighlightPlaybacks>>,
}

impl GameHighlight {
    pub fn new() -> GameHighlight {
        GameHighlight {
            _type: None,
            id: None,
            date: None,
            title: None,
            blurb: None,
            description: None,
            duration: None,
            auth_flow: None,
            media_playback_id: None,
            media_state: None,
            keywords: None,
            image: None,
            playbacks: None,
        }
    }
}

/// 
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "video")]
    Video,
}

