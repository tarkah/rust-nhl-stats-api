/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameContent {
    #[serde(rename = "copyright", skip_serializing_if = "Option::is_none")]
    pub copyright: Option<String>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "editorial", skip_serializing_if = "Option::is_none")]
    pub editorial: Option<crate::models::GameContentEditorial>,
    #[serde(rename = "media", skip_serializing_if = "Option::is_none")]
    pub media: Option<crate::models::GameContentMedia>,
    #[serde(rename = "highlights", skip_serializing_if = "Option::is_none")]
    pub highlights: Option<crate::models::GameContentHighlights>,
}

impl GameContent {
    pub fn new() -> GameContent {
        GameContent {
            copyright: None,
            link: None,
            editorial: None,
            media: None,
            highlights: None,
        }
    }
}


