/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct GameMediaAudioItems {
    #[serde(rename = "mediaState", skip_serializing_if = "Option::is_none")]
    pub media_state: Option<String>,
    #[serde(rename = "mediaPlaybackId", skip_serializing_if = "Option::is_none")]
    pub media_playback_id: Option<String>,
    #[serde(rename = "mediaFeedType", skip_serializing_if = "Option::is_none")]
    pub media_feed_type: Option<String>,
    #[serde(rename = "callLetters", skip_serializing_if = "Option::is_none")]
    pub call_letters: Option<String>,
    #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "freeGame", skip_serializing_if = "Option::is_none")]
    pub free_game: Option<bool>,
    #[serde(rename = "feedName", skip_serializing_if = "Option::is_none")]
    pub feed_name: Option<String>,
    #[serde(rename = "gamePlus", skip_serializing_if = "Option::is_none")]
    pub game_plus: Option<bool>,
}

impl GameMediaAudioItems {
    pub fn new() -> GameMediaAudioItems {
        GameMediaAudioItems {
            media_state: None,
            media_playback_id: None,
            media_feed_type: None,
            call_letters: None,
            event_id: None,
            language: None,
            free_game: None,
            feed_name: None,
            game_plus: None,
        }
    }
}


