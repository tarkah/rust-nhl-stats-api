/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ScheduleApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ScheduleApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ScheduleApiClient<C> {
        ScheduleApiClient {
            configuration: configuration,
        }
    }
}

pub trait ScheduleApi {
    fn get_schedule(&self, expand: &str, team_id: &str, start_date: String, end_date: String) -> Box<Future<Item = crate::models::Schedule, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>ScheduleApi for ScheduleApiClient<C> {
    fn get_schedule(&self, expand: &str, team_id: &str, start_date: String, end_date: String) -> Box<Future<Item = crate::models::Schedule, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/schedule".to_string())
            .with_query_param("expand".to_string(), expand.to_string())
            .with_query_param("teamId".to_string(), team_id.to_string())
            .with_query_param("startDate".to_string(), start_date.to_string())
            .with_query_param("endDate".to_string(), end_date.to_string())
            .execute(self.configuration.borrow())
    }

}
