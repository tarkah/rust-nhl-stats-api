/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct GamesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl GamesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> GamesApiClient {
        GamesApiClient {
            configuration: configuration,
        }
    }
}

pub trait GamesApi {
    fn get_game(&self, id: u32) -> Result<crate::models::Game, Error>;
    fn get_game_boxscore(&self, id: u32) -> Result<crate::models::GameBoxscores, Error>;
    fn get_game_content(&self, id: u32) -> Result<crate::models::GameContent, Error>;
    fn get_game_diff(&self, id: u32, start_timecode: &str) -> Result<crate::models::Game, Error>;
}

impl GamesApi for GamesApiClient {
    fn get_game(&self, id: u32) -> Result<crate::models::Game, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/game/{id}/feed/live", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_game_boxscore(&self, id: u32) -> Result<crate::models::GameBoxscores, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/game/{id}/boxscore", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_game_content(&self, id: u32) -> Result<crate::models::GameContent, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/game/{id}/content", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_game_diff(&self, id: u32, start_timecode: &str) -> Result<crate::models::Game, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/game/{id}/feed/live/diffPatch", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("startTimecode", &start_timecode.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
