/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct DivisionsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DivisionsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DivisionsApiClient {
        DivisionsApiClient {
            configuration: configuration,
        }
    }
}

pub trait DivisionsApi {
    fn get_division(&self, id: f32) -> Result<crate::models::Division, Error>;
    fn get_divisions(&self, ) -> Result<crate::models::Divisions, Error>;
}

impl DivisionsApi for DivisionsApiClient {
    fn get_division(&self, id: f32) -> Result<crate::models::Division, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/divisions/{id}", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_divisions(&self, ) -> Result<crate::models::Divisions, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/divisions", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
