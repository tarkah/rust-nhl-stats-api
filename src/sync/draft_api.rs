/*
 * NHL API
 *
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{Error, configuration};

pub struct DraftApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl DraftApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> DraftApiClient {
        DraftApiClient {
            configuration: configuration,
        }
    }
}

pub trait DraftApi {
    fn get_draft(&self, ) -> Result<crate::models::Draft, Error>;
    fn get_draft_by_year(&self, year: f32) -> Result<crate::models::Draft, Error>;
    fn get_draft_prospect(&self, id: u32) -> Result<crate::models::DraftProspects, Error>;
    fn get_draft_prospects(&self, ) -> Result<crate::models::DraftProspects, Error>;
}

impl DraftApi for DraftApiClient {
    fn get_draft(&self, ) -> Result<crate::models::Draft, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/draft", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_draft_by_year(&self, year: f32) -> Result<crate::models::Draft, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/draft/{year}", configuration.base_path, year=year);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_draft_prospect(&self, id: u32) -> Result<crate::models::DraftProspects, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/draft/prospects/{id}", configuration.base_path, id=id);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_draft_prospects(&self, ) -> Result<crate::models::DraftProspects, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/draft/prospects", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
